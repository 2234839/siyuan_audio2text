{"version":3,"file":"index.js","sources":["../../src/libs/api.ts","../../src/audio2text_plugin_siyuan/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 frostime. All rights reserved.\n * https://github.com/frostime/sy-plugin-template-vite\n *\n * See API Document in [API.md](https://github.com/siyuan-note/siyuan/blob/master/API.md)\n * API 文档见 [API_zh_CN.md](https://github.com/siyuan-note/siyuan/blob/master/API_zh_CN.md)\n */\n\nimport { fetchSyncPost, IWebSocketData } from \"siyuan\";\n\nasync function request(url: string, data: any) {\n  let response: IWebSocketData = await fetchSyncPost(url, data);\n  let res = response.code === 0 ? response.data : null;\n  return res;\n}\n\n// **************************************** Noteboook ****************************************\n\nexport async function lsNotebooks(): Promise<IReslsNotebooks> {\n  let url = \"/api/notebook/lsNotebooks\";\n  return request(url, \"\");\n}\n\nexport async function openNotebook(notebook: NotebookId) {\n  let url = \"/api/notebook/openNotebook\";\n  return request(url, { notebook: notebook });\n}\n\nexport async function closeNotebook(notebook: NotebookId) {\n  let url = \"/api/notebook/closeNotebook\";\n  return request(url, { notebook: notebook });\n}\n\nexport async function renameNotebook(notebook: NotebookId, name: string) {\n  let url = \"/api/notebook/renameNotebook\";\n  return request(url, { notebook: notebook, name: name });\n}\n\nexport async function createNotebook(name: string): Promise<Notebook> {\n  let url = \"/api/notebook/createNotebook\";\n  return request(url, { name: name });\n}\n\nexport async function removeNotebook(notebook: NotebookId) {\n  let url = \"/api/notebook/removeNotebook\";\n  return request(url, { notebook: notebook });\n}\n\nexport async function getNotebookConf(notebook: NotebookId): Promise<IResGetNotebookConf> {\n  let data = { notebook: notebook };\n  let url = \"/api/notebook/getNotebookConf\";\n  return request(url, data);\n}\n\nexport async function setNotebookConf(\n  notebook: NotebookId,\n  conf: NotebookConf,\n): Promise<NotebookConf> {\n  let data = { notebook: notebook, conf: conf };\n  let url = \"/api/notebook/setNotebookConf\";\n  return request(url, data);\n}\n\n// **************************************** File Tree ****************************************\nexport async function createDocWithMd(\n  notebook: NotebookId,\n  path: string,\n  markdown: string,\n): Promise<DocumentId> {\n  let data = {\n    notebook: notebook,\n    path: path,\n    markdown: markdown,\n  };\n  let url = \"/api/filetree/createDocWithMd\";\n  return request(url, data);\n}\n\nexport async function renameDoc(\n  notebook: NotebookId,\n  path: string,\n  title: string,\n): Promise<DocumentId> {\n  let data = {\n    doc: notebook,\n    path: path,\n    title: title,\n  };\n  let url = \"/api/filetree/renameDoc\";\n  return request(url, data);\n}\n\nexport async function removeDoc(notebook: NotebookId, path: string) {\n  let data = {\n    notebook: notebook,\n    path: path,\n  };\n  let url = \"/api/filetree/removeDoc\";\n  return request(url, data);\n}\n\nexport async function moveDocs(fromPaths: string[], toNotebook: NotebookId, toPath: string) {\n  let data = {\n    fromPaths: fromPaths,\n    toNotebook: toNotebook,\n    toPath: toPath,\n  };\n  let url = \"/api/filetree/moveDocs\";\n  return request(url, data);\n}\n\nexport async function getHPathByPath(notebook: NotebookId, path: string): Promise<string> {\n  let data = {\n    notebook: notebook,\n    path: path,\n  };\n  let url = \"/api/filetree/getHPathByPath\";\n  return request(url, data);\n}\n\nexport async function getHPathByID(id: BlockId): Promise<string> {\n  let data = {\n    id: id,\n  };\n  let url = \"/api/filetree/getHPathByID\";\n  return request(url, data);\n}\n\n// **************************************** Asset Files ****************************************\n\nexport async function upload(assetsDirPath: string, files: string | Blob[]): Promise<IResUpload> {\n  let form = new FormData();\n  form.append(\"assetsDirPath\", assetsDirPath);\n  for (let file of files) {\n    form.append(\"file[]\", file);\n  }\n  let url = \"/api/asset/upload\";\n  return request(url, form);\n}\n\n// **************************************** Block ****************************************\ntype DataType = \"markdown\" | \"dom\";\nexport async function insertBlock(\n  dataType: DataType,\n  data: string,\n  nextID?: BlockId,\n  previousID?: BlockId,\n  parentID?: BlockId,\n): Promise<IResdoOperations[]> {\n  let payload = {\n    dataType: dataType,\n    data: data,\n    nextID: nextID,\n    previousID: previousID,\n    parentID: parentID,\n  };\n  let url = \"/api/block/insertBlock\";\n  return request(url, payload);\n}\n\nexport async function prependBlock(\n  dataType: DataType,\n  data: string,\n  parentID: BlockId | DocumentId,\n): Promise<IResdoOperations[]> {\n  let payload = {\n    dataType: dataType,\n    data: data,\n    parentID: parentID,\n  };\n  let url = \"/api/block/prependBlock\";\n  return request(url, payload);\n}\n\nexport async function appendBlock(\n  dataType: DataType,\n  data: string,\n  parentID: BlockId | DocumentId,\n): Promise<IResdoOperations[]> {\n  let payload = {\n    dataType: dataType,\n    data: data,\n    parentID: parentID,\n  };\n  let url = \"/api/block/appendBlock\";\n  return request(url, payload);\n}\n\nexport async function updateBlock(\n  dataType: DataType,\n  data: string,\n  id: BlockId,\n): Promise<IResdoOperations[]> {\n  let payload = {\n    dataType: dataType,\n    data: data,\n    id: id,\n  };\n  let url = \"/api/block/updateBlock\";\n  return request(url, payload);\n}\n\nexport async function deleteBlock(id: BlockId): Promise<IResdoOperations[]> {\n  let data = {\n    id: id,\n  };\n  let url = \"/api/block/deleteBlock\";\n  return request(url, data);\n}\n\nexport async function moveBlock(\n  id: BlockId,\n  previousID?: PreviousID,\n  parentID?: ParentID,\n): Promise<IResdoOperations[]> {\n  let data = {\n    id: id,\n    previousID: previousID,\n    parentID: parentID,\n  };\n  let url = \"/api/block/moveBlock\";\n  return request(url, data);\n}\n\nexport async function getBlockKramdown(id: BlockId): Promise<IResGetBlockKramdown> {\n  let data = {\n    id: id,\n  };\n  let url = \"/api/block/getBlockKramdown\";\n  return request(url, data);\n}\n\nexport async function getChildBlocks(id: BlockId): Promise<IResGetChildBlock[]> {\n  let data = {\n    id: id,\n  };\n  let url = \"/api/block/getChildBlocks\";\n  return request(url, data);\n}\n\nexport async function transferBlockRef(fromID: BlockId, toID: BlockId, refIDs: BlockId[]) {\n  let data = {\n    fromID: fromID,\n    toID: toID,\n    refIDs: refIDs,\n  };\n  let url = \"/api/block/transferBlockRef\";\n  return request(url, data);\n}\n\n// **************************************** Attributes ****************************************\nexport async function setBlockAttrs(id: BlockId, attrs: { [key: string]: string }) {\n  let data = {\n    id: id,\n    attrs: attrs,\n  };\n  let url = \"/api/attr/setBlockAttrs\";\n  return request(url, data);\n}\n\nexport async function getBlockAttrs(id: BlockId): Promise<{ [key: string]: string }> {\n  let data = {\n    id: id,\n  };\n  let url = \"/api/attr/getBlockAttrs\";\n  return request(url, data);\n}\n\n// **************************************** SQL ****************************************\n\nexport async function sql(sql: string): Promise<any[]> {\n  let sqldata = {\n    stmt: sql,\n  };\n  let url = \"/api/query/sql\";\n  return request(url, sqldata);\n}\n\nexport async function getBlockByID(blockId: string): Promise<Block> {\n  let sqlScript = `select * from blocks where id ='${blockId}'`;\n  let data = await sql(sqlScript);\n  return data[0];\n}\n\n// **************************************** Template ****************************************\n\nexport async function render(id: DocumentId, path: string): Promise<IResGetTemplates> {\n  let data = {\n    id: id,\n    path: path,\n  };\n  let url = \"/api/template/render\";\n  return request(url, data);\n}\n\nexport async function renderSprig(template: string): Promise<string> {\n  let url = \"/api/template/renderSprig\";\n  return request(url, { template: template });\n}\n\n// **************************************** File ****************************************\n\n/**\n * https://github.com/siyuan-note/siyuan/blob/master/API_zh_CN.md#%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6\n * \"/data/box_id/doc_id.sy\"\n */\nexport async function getFile(path: string): Promise<any> {\n  let data = {\n    path: path,\n  };\n  let url = \"/api/file/getFile\";\n  try {\n    let file = await fetchSyncPost(url, data);\n    return file;\n  } catch (error_msg) {\n    throw error_msg\n    console.log(\"[error_msg]\", error_msg);\n    return null;\n  }\n}\n\nexport async function putFile(path: string, isDir: boolean, file: any) {\n  let form = new FormData();\n  form.append(\"path\", path);\n  form.append(\"isDir\", isDir.toString());\n  // Copyright (c) 2023, terwer.\n  // https://github.com/terwer/siyuan-plugin-importer/blob/v1.4.1/src/api/kernel-api.ts\n  form.append(\"modTime\", Math.floor(Date.now() / 1000).toString());\n  form.append(\"file\", file);\n  let url = \"/api/file/putFile\";\n  return request(url, form);\n}\n\nexport async function removeFile(path: string) {\n  let data = {\n    path: path,\n  };\n  let url = \"/api/file/removeFile\";\n  return request(url, data);\n}\n\nexport async function readDir(path: string): Promise<IResReadDir> {\n  let data = {\n    path: path,\n  };\n  let url = \"/api/file/readDir\";\n  return request(url, data);\n}\n\n// **************************************** Export ****************************************\n\nexport async function exportMdContent(id: DocumentId): Promise<IResExportMdContent> {\n  let data = {\n    id: id,\n  };\n  let url = \"/api/export/exportMdContent\";\n  return request(url, data);\n}\n\nexport async function exportResources(paths: string[], name: string): Promise<IResExportResources> {\n  let data = {\n    paths: paths,\n    name: name,\n  };\n  let url = \"/api/export/exportResources\";\n  return request(url, data);\n}\n\n// **************************************** Convert ****************************************\n\nexport type PandocArgs = string;\nexport async function pandoc(args: PandocArgs[]) {\n  let data = {\n    args: args,\n  };\n  let url = \"/api/convert/pandoc\";\n  return request(url, data);\n}\n\n// **************************************** Notification ****************************************\n\n// /api/notification/pushMsg\n// {\n//     \"msg\": \"test\",\n//     \"timeout\": 7000\n//   }\nexport async function pushMsg(msg: string, timeout: number = 7000) {\n  let payload = {\n    msg: msg,\n    timeout: timeout,\n  };\n  let url = \"/api/notification/pushMsg\";\n  return request(url, payload);\n}\n\nexport async function pushErrMsg(msg: string, timeout: number = 7000) {\n  let payload = {\n    msg: msg,\n    timeout: timeout,\n  };\n  let url = \"/api/notification/pushErrMsg\";\n  return request(url, payload);\n}\n\n// **************************************** Network ****************************************\nexport async function forwardProxy(\n  url: string,\n  method: string = \"GET\",\n  payload: any = {},\n  headers: any[] = [],\n  timeout: number = 7000,\n  contentType: string = \"text/html\",\n): Promise<IResForwardProxy> {\n  let data = {\n    url: url,\n    method: method,\n    timeout: timeout,\n    contentType: contentType,\n    headers: headers,\n    payload: payload,\n  };\n  let url1 = \"/api/network/forwardProxy\";\n  return request(url1, data);\n}\n\n// **************************************** System ****************************************\n\nexport async function bootProgress(): Promise<IResBootProgress> {\n  return request(\"/api/system/bootProgress\", {});\n}\n\nexport async function version(): Promise<string> {\n  return request(\"/api/system/version\", {});\n}\n\nexport async function currentTime(): Promise<number> {\n  return request(\"/api/system/currentTime\", {});\n}\n\nexport async function insertLocalAssets(data: {\n  assetPaths: string[];\n  isUpload: boolean;\n  id: string;\n}): Promise<{\n  succMap: {\n    [assetFileName: string]: string;\n  };\n}> {\n  return request(\"/api/asset/insertLocalAssets\", data);\n}\n","import { Plugin } from \"siyuan\";\nimport { insertBlock, setBlockAttrs, sql, updateBlock } from \"~/libs/api\";\n\nconst custom_audio_id = \"custom-audio_id\";\n\nexport default class audio2text_plugin_siyuan extends Plugin {\n  async onload() {\n    this.addCommand({\n      hotkey: \"\",\n      langKey: `转化所有音频为文本`,\n      langText: `转化所有音频为文本`,\n      callback: () => {\n        this.audio2text();\n      },\n    });\n\n    // 监听 audio 块并添加重新识别的按钮\n    const watchDOMChanges = () => {\n      var observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (mutation.type === \"childList\") {\n            // 当 DOM 中有新的子节点被添加时\n            mutation.addedNodes.forEach((audioDiv) => {\n              if (audioDiv instanceof HTMLElement && audioDiv?.dataset.type === \"NodeAudio\") {\n                const reloadBtn = document.createElement(\"button\");\n                reloadBtn.innerText = \"🔄️\";\n                reloadBtn.contentEditable = \"false\";\n                reloadBtn.style.marginLeft = \"10px\";\n                audioDiv.appendChild(reloadBtn);\n                this.onunloadFn.push(() => reloadBtn.remove());\n\n                reloadBtn.onclick = async () => {\n                  const audioBlock = (\n                    await sql(`select * from blocks where id = \"${audioDiv?.dataset.nodeId}\"`)\n                  )[0];\n                  await audioBlockAddText(audioBlock);\n                  // 思源在刷新后会将按钮的文本取消，所以这里重新设置\n                  reloadBtn.innerText = \"🔄️\";\n                };\n              }\n            });\n          }\n        });\n      });\n      var config = { childList: true, subtree: true };\n      observer.observe(document.body, config);\n      return observer;\n    };\n\n    // 开始观察 DOM 变化\n    var observer = watchDOMChanges();\n    this.onunloadFn.push(() => observer.disconnect());\n    // 如果你想要停止观察 DOM 变化，可以调用以下代码：\n    // observer.disconnect();\n  }\n  async audio2text() {\n    const audioBlocks: Block[] = await sql(\n      /** 查询没有 text 属性的blocks */\n      `\n    SELECT * FROM blocks AS b\n    WHERE\n      b.type =\"audio\"\n        AND\n      NOT EXISTS (\n        SELECT 1\n        FROM attributes AS a\n        WHERE a.block_id = b.id AND a.\"name\" = \"custom-text\"\n      )\n    `,\n    );\n    await Promise.all(audioBlocks.map(audioBlockAddText));\n  }\n  /** 插件卸载时会执行此数组中的函数 */\n  onunloadFn = [] as (() => void)[];\n  async onunload() {\n    this.onunloadFn.forEach((fn) => fn());\n  }\n}\n\nasync function audioBlockAddText(audioBlock: Block) {\n  const audioFile = await fetch(audioBlock.content).then((r) => r.arrayBuffer());\n\n  // 上传文件识别为文本\n  const audioText = await audioFile2Text(audioFile);\n  await setBlockAttrs(audioBlock.id, {\n    \"custom-text\": audioText,\n  });\n  // 插入或更新文本节点\n  const audioTextAttr: attribute = (\n    await sql(\n      `\n    SELECT * FROM attributes\n    WHERE \"name\" =\"${custom_audio_id}\" AND VALUE = \"${audioBlock.id}\"`,\n    )\n  )[0];\n  if (audioTextAttr === undefined) {\n    await insertBlock(\n      \"markdown\",\n      genAudioTextMarkdown(audioBlock, audioText),\n      undefined,\n      audioBlock.id,\n    );\n  } else {\n    await updateBlock(\n      \"markdown\",\n      genAudioTextMarkdown(audioBlock, audioText),\n      audioTextAttr.block_id,\n    );\n  }\n}\n\nasync function audioFile2Text(audio: ArrayBuffer): Promise<string> {\n  // 此处实现识别音频为文本的功能\n\n  return \"识别结果测试\" + new Date().toLocaleString();\n}\n\nfunction genAudioTextMarkdown(audioBlock: Block, audioText: string) {\n  return `${audioText}\\n{: ${custom_audio_id}=\"${audioBlock.id}\" style=\"text-align: center;\"}`;\n}\n"],"names":["sql","observer"],"mappings":"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"}